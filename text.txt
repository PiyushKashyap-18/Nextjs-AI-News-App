#CARD 
https://www.cult-ui.com/docs/components/expandable
https://magicui.design/docs/components/border-beam -- login
https://magicui.design/docs/components/shine-border -- LOGIN
https://animata.design/docs/list/transaction-list
https://animata.design/docs/widget

#BUTTON
https://www.cult-ui.com/docs/components/popover
https://magicui.design/docs/components/shiny-button
https://magicui.design/docs/components/interactive-hover-button
https://magicui.design/docs/components/animated-subscribe-button
https://animata.design/docs/button


#LIST
https://www.cult-ui.com/docs/components/sortable-list


#SOCIAL
https://www.cult-ui.com/docs/components/tweet-grid
https://magicui.design/docs/components/marquee
https://magicui.design/docs/components/hero-video-dialog


#TEXT ANIMATION
https://www.cult-ui.com/docs/components/text-animate
https://magicui.design/docs/components/text-animate
https://magicui.design/docs/components/line-shadow-text
https://magicui.design/docs/components/aurora-text
https://www.cult-ui.com/docs/components/typewriter
https://magicui.design/docs/components/number-ticker --Numver COUnter
https://animata.design/docs/text/counter -- number counter
https://magicui.design/docs/components/animated-shiny-text -- BETA
https://magicui.design/docs/components/animated-gradient-text -- BETA
https://magicui.design/docs/components/text-reveal  -- revil
https://magicui.design/docs/components/word-rotate -- ROTATE
https://magicui.design/docs/components/typing-animation --TYPEWRITTER
https://magicui.design/docs/components/scroll-based-velocity  -- TEXT Scroll vertically
https://magicui.design/docs/components/flip-text Flip text
https://magicui.design/docs/components/box-reveal --box revel
https://magicui.design/docs/components/sparkles-text -- sparkles text


#PHONE WEB ANDROID
https://magicui.design/docs/components/iphone-15-pro
https://magicui.design/docs/components/android
https://magicui.design/docs/components/safari


#BACKGROUND
https://magicui.design/docs/components/dot-pattern
https://animata.design/docs/background/dot
https://animata.design/docs/background/interactive-grid


#CHAT
https://animata.design/docs/card/comment-reply-card

#TABS
https://animata.design/docs/card/fluid-tabs



#OTHERS
https://animata.design/docs/card/reminder-scheduler    clock / dates / weeks




https://v0.dev/chat/next-js-onboarding-app-ny5pikeEQpl





====================================EMAIL=================================================
Subject line: How is your free trial so far?

Hi [Prospect First Name],

First off, thank you for signing up for the free trial! It’s been a few days since you signed up, so I wanted to check in and see how it’s going so far.

Do you have any questions about [product/service]? I’m happy to clarify any concerns you may have and provide helpful information and resources.

Would you have time this week to chat about this further? I would love to discuss how [product/service] can help you—just let me know.

Best regards,
[Your Name]
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++New FEature++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Subject line: Explore [Product Name]’s new feature

Hi [Prospect First Name],

Dropping in to announce that we’ve just added [feature] to our [product/service], and I think your team will love it! Below is a quick breakdown of the benefits:

[Benefit 1]

[Benefit 2]

[Benefit 3]

Don’t hesitate to reach out if you have any questions.

Best,
[Your Name]

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++Launch End+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Launch is close
Hey {{person.firstName}},

I have an important announcement regarding the [add product].

You already know about the [add main benefits here], and with the launch being just over a week away, I am today announcing a pre-order sale.

If pre-ordered today, you can get the [enter product] with a 50% discount and a secret bonus.

The discount is available for up to 24 hours before the launch date on [enter date].

To read the pre-order sales page — click here.

If you have any questions, hit the reply button in this email, and I’ll send a personal reply back ASAP.

The price available for pre-order will go away soon, so act fast if you want the discount and secret bonus.

Speak soon,

[your name]


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++Launch End+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



"use client";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { authClient } from "@/lib/auth-client";
import { Separator } from "@/components/ui/separator";
import { Chrome } from "lucide-react";
import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { BorderBeam } from "@/components/magicui/border-beam";

const LoginForm = () => {
  const router = useRouter();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  useEffect(() => {
    const checkSession = async () => {
      const session = await authClient.getSession();
      if (session) {
        router.push("/app");
      }
    };
    checkSession();
  }, [router]);

  const handleGoogleLogin = async () => {
    await authClient.signIn.social({
      provider: "google",
    });
  };

  const handleEmailPasswordLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      // HACK: Casting to any to bypass TypeScript error.
      // The `better-auth` client types don't seem to reflect the
      // server-side configuration automatically.
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      await (authClient.signIn as any).emailAndPassword({
        email,
        password,
      });
      router.push("/app");
    } catch (error) {
      console.error("Failed to sign in", error);
      // Handle error (e.g., show a notification to the user)
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50 dark:bg-gray-900 p-4">
      <Card className="relative w-full max-w-md">
        <CardHeader className="space-y-1 text-center">
          <CardTitle className="text-2xl">Sign in to your account</CardTitle>
          <CardDescription>
            Enter your email below to sign in or use your Google account.
          </CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4">
          <Button
            variant="outline"
            className="w-full"
            onClick={handleGoogleLogin}
          >
            <Chrome className="mr-2 h-4 w-4" />
            Sign in with Google
          </Button>
          <div className="relative">
            <Separator />
            <span className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 bg-background px-2 text-sm text-muted-foreground">
              Or continue with
            </span>
          </div>
          <form onSubmit={handleEmailPasswordLogin} className="grid gap-4">
            <div className="grid gap-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="m@example.com"
                required
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type="password"
                required
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
            <Button type="submit" className="w-full">
              Sign In
            </Button>
          </form>
        </CardContent>
        <BorderBeam duration={8} size={100} />
      </Card>
    </div>
  );
};

export default LoginForm;


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++Launch End+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++







"use client";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { Chrome } from "lucide-react";
import { signIn } from "next-auth/react";

const LoginForm = () => {
  const handleGoogleLogin = async () => {
    await signIn("google", { callbackUrl: "/app" });
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50 dark:bg-gray-900 p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1 text-center">
          <CardTitle className="text-2xl">Sign in to your account</CardTitle>
          <CardDescription>
            Enter your email below to sign in or use your Google account.
          </CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4">
          <Button
            variant="outline"
            className="w-full"
            onClick={handleGoogleLogin}
          >
            <Chrome className="mr-2 h-4 w-4" />
            Sign in with Google
          </Button>
          <div className="relative">
            <Separator />
            <span className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 bg-background px-2 text-sm text-muted-foreground">
              Or continue with
            </span>
          </div>
          <form onSubmit={() => {}} className="grid gap-4">
            <div className="grid gap-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="m@example.com"
                required
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="password">Password</Label>
              <Input id="password" type="password" required />
            </div>
            <Button type="submit" className="w-full">
              Sign In
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
};

export default LoginForm;
